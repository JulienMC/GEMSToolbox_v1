%% This program allows for the computation of water and heat flow through a mine network
%%     Copyright (C) 2022  Durham University
%
%     This program is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
%
%     This program is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%     GNU General Public License for more details.
%
%     You should have received a copy of the GNU General Public License
%     along with this program.  If not, see <https://www.gnu.org/licenses/>.
%%

% This functions bundles all the relevant data from the input files into
% easy access structs.
function [PhysicalProperties, NumericalProperties] = bundleProperties(sc, tableD, irun)
    % Physical parameters
    k_r    = loadTableVar(sc,irun,'k_r',tableD);      % rock thermal conductivity[
    Cp_r   = loadTableVar(sc,irun,'Cp_r',tableD);     % rock heat capacity       [
    rho_r  = loadTableVar(sc,irun,'rho_r',tableD);    % rock density             [kg m^-3]
    k_f    = loadTableVar(sc,irun,'k_f',tableD);      % fluid thermal conductivity[
    Cp_f   = loadTableVar(sc,irun,'Cp_f',tableD);     % fluid heat capacity       [
    nu_f   = loadTableVar(sc,irun,'nu_f',tableD);     % fluid kinematic viscosity [
    rho_f  = loadTableVar(sc,irun,'rho_f',tableD);    % fluid density             [kg m^-3]
    Tf_ini = loadTableVar(sc,irun,'Tf_ini',tableD);   % water inflow temperature [oC]
    Tr     = loadTableVar(sc,irun,'Tr',tableD);       % Initial rock temperature [oC]
    d_set  = loadTableVar(sc,irun,'d_set',tableD);    % Pipe diameter            [m]
    nyrs   = loadTableVar(sc,irun,'nyrs',tableD);     % flow duration            [yrs]
    eps    = loadTableVar(sc,irun,'eps',tableD);      % Darcy-Weisbach rougness  [m]
    qset   = {mat2str(loadTableVar(sc,irun,'qset',tableD))};     % Flow rate                [m^3.s^-1]
    q_in   = loadTableVar(sc,irun,'q_in',tableD);    % Inflow nodes
    q_out   = loadTableVar(sc,irun,'q_out',tableD);     % Outflow nodes
    max_radius = loadTableVar(sc,irun,'max_radius',tableD); % Maximum potential critical radius [m]
    v_gw   = loadTableVar(sc, irun, 'gw_darcy_velocity',tableD); % The maximum Darcy velocity of ground water flowing into the mine [m/s]
    K      = loadTableVar(sc, irun, 'Hydraulic_conductivity',tableD); % The Hydraulic Conductivity of the pipes
    poro   = loadTableVar(sc, irun, 'Porosity',tableD); % The porosity of the pipes
    COP   = loadTableVar(sc, irun, 'COP',tableD); % The COP of the heat pump used in the scheme
    mat_d_prop = {mat2str(loadTableVar(sc,irun,'mat_d_prop',tableD))}; % values of diameters to override pipes
    mat_K_prop = {mat2str(loadTableVar(sc,irun,'mat_K_prop',tableD))};% values of permeability to override pipes
    depths = {mat2str(loadTableVar(sc,irun,'depths',tableD))};% values of GIS file depths when no POINT_Z info can be found in the attribute table

    % Numerical parameters
    igeom = loadTableVar(sc,irun,'igeom',tableD, "str");       % The geometry of the run.
    heat_model = loadTableVar(sc,irun,'heat_model',tableD,"str");%The heat model to use for the computation of the temperatures.
    tag = loadTableVar(sc,irun,'Tag',tableD,"str");             % The tag of the particular run, will be added to output file name
    int_d       = loadTableVar(sc,irun,'int_d',tableD);        % Integration density for the computation of the critical radius
    sumdQrel_th = loadTableVar(sc,irun,'sumdQrel_th',tableD);  % Threshold to terminate flow computation condition 1
    maxdQrel_th = loadTableVar(sc,irun,'maxdQrel_th',tableD);  % Threshold to terminate flow computation condition 2
    a = loadTableVar(sc,irun,'a',tableD);%0.5;                  % damping oscillation param old flow
    b = loadTableVar(sc,irun,'b',tableD);%0.5;                  % damping oscillation param new flow
    num_doubles = loadTableVar(sc,irun,'num_doubles',tableD);  % Infinite loop threhsold cutoff for flow computation
    maxtraintime = loadTableVar(sc,irun,'maxtraintime',tableD);% Maximum AI Train time [yrs] - will depend on the AI model's range of training data
    timesteps = loadTableVar(sc,irun,'timesteps',tableD);      % Minimum number of heat computaiton timesteps
    max_sim_time = loadTableVar(sc,irun,'max_sim_time',tableD);% maximum heat simulation time [yrs]
    n_steps = loadTableVar(sc,irun,'n_steps',tableD);          % heat pipe discretisation steps
    nz = loadTableVar(sc,irun,'nz',tableD);                    % rock mass FD discretisation steps
    nitermax = loadTableVar(sc,irun,'nitermax',tableD);        % R&D r0 maximum iterations
    niter = loadTableVar(sc,irun,'niter',tableD);              % R&D r0 minimum iterations
    VF_speed_th = loadTableVar(sc,irun,'VF_speed_th',tableD);  % fluid velocity speed threshold
    B = loadTableVar(sc,irun,'B',tableD);                      % exponent for flow computation
    n = loadTableVar(sc,irun,'grid_width',tableD);             % grid width for igeom 202
    m = loadTableVar(sc, irun, 'grid_height',tableD);          % grid height for igeom 202
    s = loadTableVar(sc,irun,'no_seams',tableD);               % number of seams for igeom 202
    l1 = loadTableVar(sc, irun, 'h_pipe_length',tableD);       % horizontal pipes' length for igeom 202
    l2 = loadTableVar(sc, irun, 'v_pipe_length',tableD);       % vertical pipes' length for igeom 202
    h = loadTableVar(sc, irun, 'seam_spacing',tableD);         % seam spacing distance for igeom 202
    cnx = {mat2str(loadTableVar(sc, irun, 'connections',tableD))};% connextion pairs for igeom 202
    fhn = {mat2str(loadTableVar(sc,irun, 'fixed_head_node',tableD))};     % fixed head node for igeom 202
    testbank = loadTableVar(sc, irun, 'testbank',tableD);      % testbank flag
    reloadTrock = loadTableVar(sc, irun, 'reloadTrock',tableD);% flag to reload rock temperature from previous run, 1 = yes, 0 = no
    init_time = loadTableVar(sc, irun, 'init_time',tableD);    % in yrs. Time at which the sim is considered to have started. Will be added to the transit times.
    AI_modelpath = loadTableVar(sc, irun, 'AI_modelpath',tableD,"str"); % path to AI model to use (Not yet updated)
    case_mp = loadTableVar(sc,irun, 'mat_prop_case',tableD); % The switch case to be used when applying material properties to the model
    open_th  = loadTableVar(sc,irun, 'open_th',tableD); % The porosity value above which a pipe is considered open with 100% porosity.
    well_exclusion_th  = loadTableVar(sc,irun, 'well_exclusion_th',tableD); % the radius around the well which is assigned fixed properties even when random properties are used.
    rng_seed = loadTableVar(sc,irun,'rng_seed',tableD); % the seed for the random number generator.
    Qth_tree = loadTableVar(sc, irun, 'Qth_tree',tableD);      % The flow threshold Q(ip)/max(Q) below which a flow is considered negligeable when building the tree.
    node_outputs = loadTableVar(sc, irun, 'node_outputs',tableD, "str"); % additional user specified outputs
    pipe_outputs = loadTableVar(sc, irun, 'pipe_outputs',tableD, "str"); % additional user specified outputs
    ArcGIS_file_name = loadTableVar(sc, irun, 'ArcGIS_file_name',tableD, "str"); % the name of the ArcGISfile to load
    flow_model = loadTableVar(sc, irun, 'flow_model',tableD, "str"); % the name of the flow function step to call
    mat_pipe_ids = {mat2str(loadTableVar(sc, irun, 'mat_pipe_ids',tableD))}; % ids of the pipes to modify the material properties of
    reuse_geom = loadTableVar(sc,irun,'reuse_geom',tableD); % should the geometry from the previous irun be used?
    
    % wraps some physical properties into a table to easily pass them on to other functions.
    PhysicalProperties = table( ...
        igeom,...
        max_radius, ...
        k_r, ...
        Cp_r, ...
        rho_r, ...
        Tf_ini, ...
        Tr, ...
        d_set, ...
        eps, ...
        rho_f, ...
        k_f, ...
        Cp_f, ...
        nu_f, ...
        nyrs, ...
        qset, ...
        q_out, ...
        q_in,...
        v_gw,...
        K,...
        poro,...
        COP,...
        mat_d_prop,...
        mat_K_prop,...
        depths);
    PhysicalProperties = PropertyStruct(PhysicalProperties); % used as is 10x faster than tables
    % wraps some numerical properties into a table for ease of access
    NumericalProperties = table( ...
        tag,...
        heat_model,...
        flow_model,...
        B, ...
        int_d, ...
        sumdQrel_th, ...
        maxdQrel_th, ...
        a, ...
        b, ...
        num_doubles, ...
        maxtraintime, ...
        timesteps, ...
        max_sim_time, ...
        n_steps, ...
        nz, ...
        niter, ...
        nitermax, ...
        VF_speed_th, ...
        n, ...
        m, ...
        s, ...
        l1, ...
        l2, ...
        h, ...
        cnx, ...
        fhn, ...
        testbank, ...
        reloadTrock, ...
        init_time, ...
        AI_modelpath,...
        case_mp, ...
        open_th,...
        well_exclusion_th,...
        rng_seed, ...
        Qth_tree,...
        node_outputs, ...
        pipe_outputs, ...
        ArcGIS_file_name, ...
        mat_pipe_ids,...
        reuse_geom);
    NumericalProperties = PropertyStruct(NumericalProperties);
end
